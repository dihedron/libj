/*
 * VM.h
 * Copyright (C) 2016 Andrea Funto' <dihedron.dev@gmail.com>
 * See LICENSE for details and terms of use.
 */
#ifndef LIBJPP_VM
#define LIBJPP_VM

/// The boolean type, with a proper C++ name.
typedef bool 			jboolean;

/// The character type, with a proper C++ name.
typedef char			jchar;

/// The byte type (8 bits).
typedef unsigned char	jbyte;

/// The short integer type (usually 16 bits).
typedef short			jshort;

/// The integer type (usually 32 bits).
typedef int				jint;

/// The long integer type (usually 64 bits).
typedef long long		jlong;

/// The real (floating point) number type.
typedef float			jfloat;

/// The double precision real (floating point) number type.
typedef double			jdouble;


// The externally-configured major version of this pseudo-VM.
#define LIBJPP_VERSION_MAJOR @LIBJPP_VERSION_MAJOR@

// The externally-configured minor version of this pseudo-VM.
#define LIBJPP_VERSION_MINOR @LIBJPP_VERSION_MINOR@

// The externally-configured patch/revision version of this pseudo-VM.
#define LIBJPP_VERSION_PATCH @LIBJPP_VERSION_PATCH@

/// A class providing pseudo-VM initialisation and cleanup logic; 
/// this will set up and make available a series of services such 
/// as logging level, environment, system properties etc.
class VM {
public:

	static const char * logo;

	static jint major() { return LIBJPP_VERSION_MAJOR; }
	static jint minor() { return LIBJPP_VERSION_MINOR; }
	static jint patch() { return LIBJPP_VERSION_PATCH; }

	static void initialise();
	static void finalise();

private:
	/// Constructor.
	///
	/// This constructor is to prevent instantiation of this class.
	VM();	
}; 

/// A class to work with pseudo-reflection of templates, which need
/// a concrete type to be instantiated. Void plays the trick.
class Void {
public:
	Void() { }
	~Void() { }
};

#include <unordered_map>

namespace std {
	template <>
	struct hash<Void> {
		typedef size_t result_type;
		typedef Void argument_type;
 
		size_t operator () (Void const & k) const {
    		return hash<int>()(0);
  		}
	}; 
}

//
// LANGUAGE EXTENSIONS 
//
// These are macros that help reduce the impedance mismatch
// between Java and C++ in terms of keywords.
//
#ifndef interface
#	define 	interface 		class
#endif

#ifndef extends
#	define 	extends 		public
#endif

#ifndef implements
#	define 	implements 		public
#endif


#ifndef instanceof
#	define instanceof(T)	.instanceOf(T::klass())
#endif 

#endif // LIBJPP_VM
